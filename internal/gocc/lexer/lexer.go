// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/retroenv/nesgo/internal/gocc/token"
)

const (
	NoState    = -1
	NumStates  = 128
	NumSymbols = 187
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: ';'
1: '\n'
2: ';'
3: '\n'
4: 'b'
5: 'r'
6: 'e'
7: 'a'
8: 'k'
9: 'c'
10: 'o'
11: 'n'
12: 's'
13: 't'
14: 'f'
15: 'o'
16: 'r'
17: 'f'
18: 'u'
19: 'n'
20: 'c'
21: 'g'
22: 'o'
23: 't'
24: 'o'
25: 'i'
26: 'f'
27: 'i'
28: 'm'
29: 'p'
30: 'o'
31: 'r'
32: 't'
33: 'I'
34: 'n'
35: 'l'
36: 'i'
37: 'n'
38: 'e'
39: 'i'
40: 'n'
41: 't'
42: 'e'
43: 'r'
44: 'f'
45: 'a'
46: 'c'
47: 'e'
48: '{'
49: '}'
50: 'p'
51: 'a'
52: 'c'
53: 'k'
54: 'a'
55: 'g'
56: 'e'
57: 'r'
58: 'e'
59: 't'
60: 'u'
61: 'r'
62: 'n'
63: 't'
64: 'y'
65: 'p'
66: 'e'
67: 'v'
68: 'a'
69: 'r'
70: '.'
71: '.'
72: '.'
73: 'i'
74: 'n'
75: 't'
76: '8'
77: 'u'
78: 'i'
79: 'n'
80: 't'
81: '8'
82: 'u'
83: 'i'
84: 'n'
85: 't'
86: '1'
87: '6'
88: 'N'
89: 'e'
90: 'w'
91: 'I'
92: 'n'
93: 't'
94: '8'
95: 'N'
96: 'e'
97: 'w'
98: 'U'
99: 'i'
100: 'n'
101: 't'
102: '8'
103: 'N'
104: 'e'
105: 'w'
106: 'U'
107: 'i'
108: 'n'
109: 't'
110: '1'
111: '6'
112: '+'
113: '-'
114: '*'
115: '|'
116: '^'
117: '&'
118: '<'
119: '<'
120: '>'
121: '>'
122: '+'
123: '+'
124: '-'
125: '-'
126: '='
127: '='
128: '!'
129: '='
130: '<'
131: '<'
132: '='
133: '>'
134: '>'
135: '='
136: '!'
137: '.'
138: '('
139: ')'
140: '.'
141: '='
142: '*'
143: ','
144: ':'
145: '{'
146: '}'
147: '/'
148: '/'
149: '\n'
150: '/'
151: '*'
152: '*'
153: '*'
154: '/'
155: '_'
156: '0'
157: '0'
158: 'x'
159: 'X'
160: '0'
161: 'b'
162: 'B'
163: '`'
164: '`'
165: '"'
166: '\'
167: '"'
168: '"'
169: '\'
170: 'n'
171: '\'
172: 'r'
173: '\'
174: 't'
175: ' '
176: '\t'
177: '\r'
178: 'a'-'z'
179: 'A'-'Z'
180: '0'-'1'
181: '0'-'9'
182: '0'-'7'
183: 'a'-'f'
184: 'A'-'F'
185: '1'-'9'
186: .
*/
