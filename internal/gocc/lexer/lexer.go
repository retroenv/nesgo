// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/retroenv/nesgo/internal/gocc/token"
)

const (
	NoState    = -1
	NumStates  = 133
	NumSymbols = 195
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: ';'
1: '\n'
2: ';'
3: '\n'
4: 'b'
5: 'r'
6: 'e'
7: 'a'
8: 'k'
9: 'c'
10: 'o'
11: 'n'
12: 's'
13: 't'
14: 'c'
15: 'o'
16: 'n'
17: 't'
18: 'i'
19: 'n'
20: 'u'
21: 'e'
22: 'f'
23: 'o'
24: 'r'
25: 'f'
26: 'u'
27: 'n'
28: 'c'
29: 'g'
30: 'o'
31: 't'
32: 'o'
33: 'i'
34: 'f'
35: 'i'
36: 'm'
37: 'p'
38: 'o'
39: 'r'
40: 't'
41: 'I'
42: 'n'
43: 'l'
44: 'i'
45: 'n'
46: 'e'
47: 'i'
48: 'n'
49: 't'
50: 'e'
51: 'r'
52: 'f'
53: 'a'
54: 'c'
55: 'e'
56: '{'
57: '}'
58: 'p'
59: 'a'
60: 'c'
61: 'k'
62: 'a'
63: 'g'
64: 'e'
65: 'r'
66: 'e'
67: 't'
68: 'u'
69: 'r'
70: 'n'
71: 't'
72: 'y'
73: 'p'
74: 'e'
75: 'v'
76: 'a'
77: 'r'
78: '.'
79: '.'
80: '.'
81: 'i'
82: 'n'
83: 't'
84: '8'
85: 'u'
86: 'i'
87: 'n'
88: 't'
89: '8'
90: 'u'
91: 'i'
92: 'n'
93: 't'
94: '1'
95: '6'
96: 'N'
97: 'e'
98: 'w'
99: 'I'
100: 'n'
101: 't'
102: '8'
103: 'N'
104: 'e'
105: 'w'
106: 'U'
107: 'i'
108: 'n'
109: 't'
110: '8'
111: 'N'
112: 'e'
113: 'w'
114: 'U'
115: 'i'
116: 'n'
117: 't'
118: '1'
119: '6'
120: '+'
121: '-'
122: '*'
123: '|'
124: '^'
125: '&'
126: '<'
127: '<'
128: '>'
129: '>'
130: '+'
131: '+'
132: '-'
133: '-'
134: '='
135: '='
136: '!'
137: '='
138: '<'
139: '<'
140: '='
141: '>'
142: '>'
143: '='
144: '!'
145: '.'
146: '('
147: ')'
148: '.'
149: '='
150: '*'
151: ','
152: ':'
153: '{'
154: '}'
155: '/'
156: '/'
157: '\n'
158: '/'
159: '*'
160: '*'
161: '*'
162: '/'
163: '_'
164: '0'
165: '0'
166: 'x'
167: 'X'
168: '0'
169: 'b'
170: 'B'
171: '`'
172: '`'
173: '"'
174: '\'
175: '"'
176: '"'
177: '\'
178: 'n'
179: '\'
180: 'r'
181: '\'
182: 't'
183: ' '
184: '\t'
185: '\r'
186: 'a'-'z'
187: 'A'-'Z'
188: '0'-'1'
189: '0'-'9'
190: '0'-'7'
191: 'a'-'f'
192: 'A'-'F'
193: '1'-'9'
194: .
*/
