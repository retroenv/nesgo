// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/retroenv/nesgo/internal/gocc/token"
)

const (
	NoState    = -1
	NumStates  = 148
	NumSymbols = 215
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: ';'
1: '\n'
2: ','
3: '\n'
4: ';'
5: '\n'
6: 'a'
7: 'n'
8: 'y'
9: 'b'
10: 'r'
11: 'e'
12: 'a'
13: 'k'
14: 'c'
15: 'o'
16: 'n'
17: 's'
18: 't'
19: 'c'
20: 'o'
21: 'n'
22: 't'
23: 'i'
24: 'n'
25: 'u'
26: 'e'
27: 'f'
28: 'o'
29: 'r'
30: 'f'
31: 'u'
32: 'n'
33: 'c'
34: 'g'
35: 'o'
36: 't'
37: 'o'
38: 'i'
39: 'f'
40: 'i'
41: 'm'
42: 'p'
43: 'o'
44: 'r'
45: 't'
46: 'I'
47: 'n'
48: 'l'
49: 'i'
50: 'n'
51: 'e'
52: 'i'
53: 'n'
54: 't'
55: 'e'
56: 'r'
57: 'f'
58: 'a'
59: 'c'
60: 'e'
61: '{'
62: '}'
63: 'p'
64: 'a'
65: 'c'
66: 'k'
67: 'a'
68: 'g'
69: 'e'
70: 'r'
71: 'e'
72: 't'
73: 'u'
74: 'r'
75: 'n'
76: 't'
77: 'y'
78: 'p'
79: 'e'
80: 'v'
81: 'a'
82: 'r'
83: '.'
84: '.'
85: '.'
86: 'i'
87: 'n'
88: 't'
89: '8'
90: 'u'
91: 'i'
92: 'n'
93: 't'
94: '8'
95: 'u'
96: 'i'
97: 'n'
98: 't'
99: '1'
100: '6'
101: 's'
102: 't'
103: 'r'
104: 'i'
105: 'n'
106: 'g'
107: 'N'
108: 'e'
109: 'w'
110: 'I'
111: 'n'
112: 't'
113: '8'
114: 'N'
115: 'e'
116: 'w'
117: 'U'
118: 'i'
119: 'n'
120: 't'
121: '8'
122: 'N'
123: 'e'
124: 'w'
125: 'U'
126: 'i'
127: 'n'
128: 't'
129: '1'
130: '6'
131: 'm'
132: 'a'
133: 'p'
134: '+'
135: '-'
136: '*'
137: '|'
138: '^'
139: '&'
140: '<'
141: '<'
142: '>'
143: '>'
144: '+'
145: '+'
146: '-'
147: '-'
148: '='
149: '='
150: '!'
151: '='
152: '<'
153: '<'
154: '='
155: '>'
156: '>'
157: '='
158: '!'
159: '.'
160: '('
161: ')'
162: '.'
163: '='
164: '['
165: ']'
166: '*'
167: ','
168: ':'
169: '{'
170: '}'
171: '/'
172: '/'
173: '\n'
174: '/'
175: '*'
176: '*'
177: '*'
178: '/'
179: '_'
180: '_'
181: '_'
182: '_'
183: '_'
184: '0'
185: '0'
186: 'x'
187: 'X'
188: '0'
189: 'b'
190: 'B'
191: '`'
192: '`'
193: '"'
194: '\'
195: '"'
196: '"'
197: '\'
198: 'n'
199: '\'
200: 'r'
201: '\'
202: 't'
203: ' '
204: '\t'
205: '\r'
206: 'a'-'z'
207: 'A'-'Z'
208: '0'-'1'
209: '0'-'9'
210: '0'-'7'
211: 'a'-'f'
212: 'A'-'F'
213: '1'-'9'
214: .
*/
