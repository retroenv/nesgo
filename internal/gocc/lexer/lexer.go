// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/retroenv/nesgo/internal/gocc/token"
)

const (
	NoState    = -1
	NumStates  = 144
	NumSymbols = 208
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: ';'
1: '\n'
2: ','
3: '\n'
4: ';'
5: '\n'
6: 'b'
7: 'r'
8: 'e'
9: 'a'
10: 'k'
11: 'c'
12: 'o'
13: 'n'
14: 's'
15: 't'
16: 'c'
17: 'o'
18: 'n'
19: 't'
20: 'i'
21: 'n'
22: 'u'
23: 'e'
24: 'f'
25: 'o'
26: 'r'
27: 'f'
28: 'u'
29: 'n'
30: 'c'
31: 'g'
32: 'o'
33: 't'
34: 'o'
35: 'i'
36: 'f'
37: 'i'
38: 'm'
39: 'p'
40: 'o'
41: 'r'
42: 't'
43: 'I'
44: 'n'
45: 'l'
46: 'i'
47: 'n'
48: 'e'
49: 'i'
50: 'n'
51: 't'
52: 'e'
53: 'r'
54: 'f'
55: 'a'
56: 'c'
57: 'e'
58: '{'
59: '}'
60: 'p'
61: 'a'
62: 'c'
63: 'k'
64: 'a'
65: 'g'
66: 'e'
67: 'r'
68: 'e'
69: 't'
70: 'u'
71: 'r'
72: 'n'
73: 't'
74: 'y'
75: 'p'
76: 'e'
77: 'v'
78: 'a'
79: 'r'
80: '.'
81: '.'
82: '.'
83: 'i'
84: 'n'
85: 't'
86: '8'
87: 'u'
88: 'i'
89: 'n'
90: 't'
91: '8'
92: 'u'
93: 'i'
94: 'n'
95: 't'
96: '1'
97: '6'
98: 's'
99: 't'
100: 'r'
101: 'i'
102: 'n'
103: 'g'
104: 'N'
105: 'e'
106: 'w'
107: 'I'
108: 'n'
109: 't'
110: '8'
111: 'N'
112: 'e'
113: 'w'
114: 'U'
115: 'i'
116: 'n'
117: 't'
118: '8'
119: 'N'
120: 'e'
121: 'w'
122: 'U'
123: 'i'
124: 'n'
125: 't'
126: '1'
127: '6'
128: 'm'
129: 'a'
130: 'p'
131: '+'
132: '-'
133: '*'
134: '|'
135: '^'
136: '&'
137: '<'
138: '<'
139: '>'
140: '>'
141: '+'
142: '+'
143: '-'
144: '-'
145: '='
146: '='
147: '!'
148: '='
149: '<'
150: '<'
151: '='
152: '>'
153: '>'
154: '='
155: '!'
156: '.'
157: '('
158: ')'
159: '.'
160: '='
161: '['
162: ']'
163: '*'
164: ','
165: ':'
166: '{'
167: '}'
168: '/'
169: '/'
170: '\n'
171: '/'
172: '*'
173: '*'
174: '*'
175: '/'
176: '_'
177: '0'
178: '0'
179: 'x'
180: 'X'
181: '0'
182: 'b'
183: 'B'
184: '`'
185: '`'
186: '"'
187: '\'
188: '"'
189: '"'
190: '\'
191: 'n'
192: '\'
193: 'r'
194: '\'
195: 't'
196: ' '
197: '\t'
198: '\r'
199: 'a'-'z'
200: 'A'-'Z'
201: '0'-'1'
202: '0'-'9'
203: '0'-'7'
204: 'a'-'f'
205: 'A'-'F'
206: '1'-'9'
207: .
*/
