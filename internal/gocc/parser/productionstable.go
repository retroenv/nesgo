// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"github.com/retroenv/nesgo/internal/ast"
	"github.com/retroenv/nesgo/internal/gocc/token"
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Start	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Start : SourceFile	<<  >>`,
		Id:         "Start",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SourceFile : RepeatTerminator PackageClause terminator RepeatTerminator RepeatTopLevelDecl	<< ast.NewFile(X[1].(*ast.Package), X[4]) >>`,
		Id:         "SourceFile",
		NTType:     2,
		Index:      2,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFile(X[1].(*ast.Package), X[4])
		},
	},
	ProdTabEntry{
		String: `PackageClause : kwdPackage identifier	<< ast.NewPackage(string(X[1].(*token.Token).Lit)) >>`,
		Id:         "PackageClause",
		NTType:     3,
		Index:      3,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewPackage(string(X[1].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `ImportDecl : kwdImport ImportSpec	<< X[1], nil >>`,
		Id:         "ImportDecl",
		NTType:     4,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `ImportDecl : kwdImport "(" RepeatTerminator ImportList ")"	<< X[3], nil >>`,
		Id:         "ImportDecl",
		NTType:     4,
		Index:      5,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[3], nil
		},
	},
	ProdTabEntry{
		String: `ImportList : ImportSpec terminator RepeatTerminator ImportList	<< ast.NewNodeList(X[0], X[3]) >>`,
		Id:         "ImportList",
		NTType:     5,
		Index:      6,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeList(X[0], X[3])
		},
	},
	ProdTabEntry{
		String: `ImportList : ImportSpec RepeatTerminator	<< X[0], nil >>`,
		Id:         "ImportList",
		NTType:     5,
		Index:      7,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ImportSpec : "." stringLit	<< ast.NewImport(".", string(X[1].(*token.Token).Lit)) >>`,
		Id:         "ImportSpec",
		NTType:     6,
		Index:      8,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewImport(".", string(X[1].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `ImportSpec : identifier stringLit	<< ast.NewImport(string(X[0].(*token.Token).Lit), string(X[1].(*token.Token).Lit)) >>`,
		Id:         "ImportSpec",
		NTType:     6,
		Index:      9,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewImport(string(X[0].(*token.Token).Lit), string(X[1].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `ImportSpec : stringLit	<< ast.NewImport("", string(X[0].(*token.Token).Lit)) >>`,
		Id:         "ImportSpec",
		NTType:     6,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewImport("", string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `RepeatTopLevelDecl : TopLevelDecl RepeatTopLevelDecl	<< ast.NewNodeList(X[0], X[1]) >>`,
		Id:         "RepeatTopLevelDecl",
		NTType:     7,
		Index:      11,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeList(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `RepeatTopLevelDecl : empty	<<  >>`,
		Id:         "RepeatTopLevelDecl",
		NTType:     7,
		Index:      12,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `TopLevelDecl : Declaration RepeatTerminator	<< X[0], nil >>`,
		Id:         "TopLevelDecl",
		NTType:     8,
		Index:      13,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TopLevelDecl : FunctionDecl RepeatTerminator	<< X[0], nil >>`,
		Id:         "TopLevelDecl",
		NTType:     8,
		Index:      14,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Declaration : ConstDecl	<<  >>`,
		Id:         "Declaration",
		NTType:     9,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Declaration : TypeDecl	<<  >>`,
		Id:         "Declaration",
		NTType:     9,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Declaration : VarDecl	<<  >>`,
		Id:         "Declaration",
		NTType:     9,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Declaration : ImportDecl	<<  >>`,
		Id:         "Declaration",
		NTType:     9,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarDecl : kwdVar VarSpec	<< X[1], nil >>`,
		Id:         "VarDecl",
		NTType:     10,
		Index:      19,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `VarDecl : kwdVar "(" RepeatTerminator VarList ")"	<< X[3], nil >>`,
		Id:         "VarDecl",
		NTType:     10,
		Index:      20,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[3], nil
		},
	},
	ProdTabEntry{
		String: `VarList : VarSpec terminator RepeatTerminator VarList	<< ast.NewNodeList(X[0], X[3]) >>`,
		Id:         "VarList",
		NTType:     11,
		Index:      21,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeList(X[0], X[3])
		},
	},
	ProdTabEntry{
		String: `VarList : VarSpec RepeatTerminator	<< X[0], nil >>`,
		Id:         "VarList",
		NTType:     11,
		Index:      22,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarSpec : IdentifierList Type	<< ast.NewVariable(X[0].(ast.Node), X[1].(*ast.Type), nil) >>`,
		Id:         "VarSpec",
		NTType:     12,
		Index:      23,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewVariable(X[0].(ast.Node), X[1].(*ast.Type), nil)
		},
	},
	ProdTabEntry{
		String: `VarSpec : IdentifierList Type "=" Expression	<< ast.NewVariable(X[0].(ast.Node), X[1].(*ast.Type), X[3]) >>`,
		Id:         "VarSpec",
		NTType:     12,
		Index:      24,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewVariable(X[0].(ast.Node), X[1].(*ast.Type), X[3])
		},
	},
	ProdTabEntry{
		String: `VarSpec : IdentifierList "=" TypeConstructor "(" Expression ")"	<< ast.NewVariable(X[0].(ast.Node), X[2].(*ast.Type), X[4]) >>`,
		Id:         "VarSpec",
		NTType:     12,
		Index:      25,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewVariable(X[0].(ast.Node), X[2].(*ast.Type), X[4])
		},
	},
	ProdTabEntry{
		String: `VarSpec : empty	<<  >>`,
		Id:         "VarSpec",
		NTType:     12,
		Index:      26,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `TypeDecl : kwdType TypeDef	<< nil, nil >>`,
		Id:         "TypeDecl",
		NTType:     13,
		Index:      27,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `TypeDef : identifier Type	<<  >>`,
		Id:         "TypeDef",
		NTType:     14,
		Index:      28,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TypeDef : kwdInline Type	<<  >>`,
		Id:         "TypeDef",
		NTType:     14,
		Index:      29,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ConstDecl : kwdConst ConstSpec	<< X[1], nil >>`,
		Id:         "ConstDecl",
		NTType:     15,
		Index:      30,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `ConstDecl : kwdConst "(" RepeatTerminator ConstList ")"	<< X[3], nil >>`,
		Id:         "ConstDecl",
		NTType:     15,
		Index:      31,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[3], nil
		},
	},
	ProdTabEntry{
		String: `ConstList : ConstSpec terminator RepeatTerminator ConstList	<< ast.NewNodeList(X[0], X[3]) >>`,
		Id:         "ConstList",
		NTType:     16,
		Index:      32,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeList(X[0], X[3])
		},
	},
	ProdTabEntry{
		String: `ConstList : ConstSpec RepeatTerminator	<< X[0], nil >>`,
		Id:         "ConstList",
		NTType:     16,
		Index:      33,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ConstSpec : IdentifierList "=" Expression	<< ast.NewConstant(X[0].(*ast.Identifier), X[2].(*ast.Value)) >>`,
		Id:         "ConstSpec",
		NTType:     17,
		Index:      34,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewConstant(X[0].(*ast.Identifier), X[2].(*ast.Value))
		},
	},
	ProdTabEntry{
		String: `Expression : "(" Expression ")"	<< X[1], nil >>`,
		Id:         "Expression",
		NTType:     18,
		Index:      35,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Expression : Type "(" Expression ")"	<< ast.NewExpressionList(X[0], "cast", X[2]) >>`,
		Id:         "Expression",
		NTType:     18,
		Index:      36,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpressionList(X[0], "cast", X[2])
		},
	},
	ProdTabEntry{
		String: `Expression : Operand singleOperators	<< ast.NewExpressionList(X[0], string(X[1].(*token.Token).Lit)) >>`,
		Id:         "Expression",
		NTType:     18,
		Index:      37,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpressionList(X[0], string(X[1].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `Expression : Operand operators Operand	<< ast.NewExpressionList(X[0], string(X[1].(*token.Token).Lit), X[2]) >>`,
		Id:         "Expression",
		NTType:     18,
		Index:      38,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpressionList(X[0], string(X[1].(*token.Token).Lit), X[2])
		},
	},
	ProdTabEntry{
		String: `Expression : Operand relOp Operand	<< ast.NewExpressionList(X[0], string(X[1].(*token.Token).Lit), X[2]) >>`,
		Id:         "Expression",
		NTType:     18,
		Index:      39,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpressionList(X[0], string(X[1].(*token.Token).Lit), X[2])
		},
	},
	ProdTabEntry{
		String: `Expression : PrimaryExpr	<<  >>`,
		Id:         "Expression",
		NTType:     18,
		Index:      40,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrimaryExpr : Operand	<<  >>`,
		Id:         "PrimaryExpr",
		NTType:     19,
		Index:      41,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrimaryExpr : PrimaryExpr "(" Arguments ")"	<< ast.NewCall(X[0].(*ast.Identifier), X[2]) >>`,
		Id:         "PrimaryExpr",
		NTType:     19,
		Index:      42,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCall(X[0].(*ast.Identifier), X[2])
		},
	},
	ProdTabEntry{
		String: `Operand : Literal	<< X[0], nil >>`,
		Id:         "Operand",
		NTType:     20,
		Index:      43,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Operand : "*" OperandName	<< X[1], nil >>`,
		Id:         "Operand",
		NTType:     20,
		Index:      44,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Operand : OperandName	<< X[0], nil >>`,
		Id:         "Operand",
		NTType:     20,
		Index:      45,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Literal : BasicLit	<<  >>`,
		Id:         "Literal",
		NTType:     21,
		Index:      46,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BasicLit : intLit	<< ast.NewValue(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "BasicLit",
		NTType:     22,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewValue(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `BasicLit : stringLit	<< ast.NewValue(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "BasicLit",
		NTType:     22,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewValue(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `OperandName : identifier	<< ast.NewIdentifier(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "OperandName",
		NTType:     23,
		Index:      49,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIdentifier(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `Arguments : empty	<<  >>`,
		Id:         "Arguments",
		NTType:     24,
		Index:      50,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Arguments : Expression	<< X[0], nil >>`,
		Id:         "Arguments",
		NTType:     24,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Arguments : Arguments "," Expression	<< ast.NewNodeList(X[0], X[2]) >>`,
		Id:         "Arguments",
		NTType:     24,
		Index:      52,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeList(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Arguments : Arguments operators Expression	<< ast.NewExpressionList(X[0], string(X[1].(*token.Token).Lit), X[2]) >>`,
		Id:         "Arguments",
		NTType:     24,
		Index:      53,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpressionList(X[0], string(X[1].(*token.Token).Lit), X[2])
		},
	},
	ProdTabEntry{
		String: `FunctionDecl : FunctionMarker FunctionBody	<< ast.NewFunction(X[0].(*ast.FunctionDefinition), X[1]) >>`,
		Id:         "FunctionDecl",
		NTType:     25,
		Index:      54,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFunction(X[0].(*ast.FunctionDefinition), X[1])
		},
	},
	ProdTabEntry{
		String: `FunctionMarker : kwdFunc FunctionName Parameters	<< ast.NewFunctionHeader(X[1].(*ast.Identifier), X[2]) >>`,
		Id:         "FunctionMarker",
		NTType:     26,
		Index:      55,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFunctionHeader(X[1].(*ast.Identifier), X[2])
		},
	},
	ProdTabEntry{
		String: `Parameters : "(" RepeatTerminator ")"	<<  >>`,
		Id:         "Parameters",
		NTType:     27,
		Index:      56,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Parameters : "(" ParameterDecl ")"	<< X[1], nil >>`,
		Id:         "Parameters",
		NTType:     27,
		Index:      57,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `ParameterDecl : IdentifierList Type	<< ast.NewVariable(X[0].(ast.Node), X[1].(*ast.Type), nil) >>`,
		Id:         "ParameterDecl",
		NTType:     28,
		Index:      58,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewVariable(X[0].(ast.Node), X[1].(*ast.Type), nil)
		},
	},
	ProdTabEntry{
		String: `ParameterDecl : Type	<<  >>`,
		Id:         "ParameterDecl",
		NTType:     28,
		Index:      59,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ParameterDecl : identifier kwdVariadic kwdInline	<< ast.NewInline() >>`,
		Id:         "ParameterDecl",
		NTType:     28,
		Index:      60,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInline()
		},
	},
	ProdTabEntry{
		String: `ParameterDecl : kwdVariadic kwdInline	<< ast.NewInline() >>`,
		Id:         "ParameterDecl",
		NTType:     28,
		Index:      61,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInline()
		},
	},
	ProdTabEntry{
		String: `ParameterDecl : ParameterDecl "," ParameterDecl	<< ast.NewNodeList(X[0], X[2]) >>`,
		Id:         "ParameterDecl",
		NTType:     28,
		Index:      62,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeList(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ParameterDecl : identifier "," ParameterDecl	<< ast.NewNodeList(ast.NewUntypedParamListEntry(string(X[0].(*token.Token).Lit), X[2]), X[2]) >>`,
		Id:         "ParameterDecl",
		NTType:     28,
		Index:      63,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeList(ast.NewUntypedParamListEntry(string(X[0].(*token.Token).Lit), X[2]), X[2])
		},
	},
	ProdTabEntry{
		String: `Type : "*" type	<< ast.NewType(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "Type",
		NTType:     29,
		Index:      64,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewType(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `Type : type	<< ast.NewType(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "Type",
		NTType:     29,
		Index:      65,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewType(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `Type : TypeLit	<<  >>`,
		Id:         "Type",
		NTType:     29,
		Index:      66,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TypeConstructor : typeConstructor	<< ast.NewType(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "TypeConstructor",
		NTType:     30,
		Index:      67,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewType(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `TypeLit : InterfaceType	<<  >>`,
		Id:         "TypeLit",
		NTType:     31,
		Index:      68,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `InterfaceType : kwdInterface	<<  >>`,
		Id:         "InterfaceType",
		NTType:     32,
		Index:      69,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `IdentifierList : identifier	<< ast.NewIdentifier(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "IdentifierList",
		NTType:     33,
		Index:      70,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIdentifier(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `IdentifierList : identifier "," IdentifierList	<< ast.NewNodeList(ast.NewIdentifierNoError(string(X[0].(*token.Token).Lit)), X[2]) >>`,
		Id:         "IdentifierList",
		NTType:     33,
		Index:      71,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeList(ast.NewIdentifierNoError(string(X[0].(*token.Token).Lit)), X[2])
		},
	},
	ProdTabEntry{
		String: `FunctionName : identifier	<< ast.NewIdentifier(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "FunctionName",
		NTType:     34,
		Index:      72,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIdentifier(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `FunctionBody : Block	<<  >>`,
		Id:         "FunctionBody",
		NTType:     35,
		Index:      73,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `RepeatTerminator : terminator RepeatTerminator	<<  >>`,
		Id:         "RepeatTerminator",
		NTType:     36,
		Index:      74,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `RepeatTerminator : empty	<<  >>`,
		Id:         "RepeatTerminator",
		NTType:     36,
		Index:      75,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `StatementList : Statement terminator RepeatTerminator StatementList	<< ast.NewNodeList(X[0], X[3]) >>`,
		Id:         "StatementList",
		NTType:     37,
		Index:      76,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeList(X[0], X[3])
		},
	},
	ProdTabEntry{
		String: `StatementList : Statement RepeatTerminator	<< ast.NewNodeList(X[0]) >>`,
		Id:         "StatementList",
		NTType:     37,
		Index:      77,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewNodeList(X[0])
		},
	},
	ProdTabEntry{
		String: `Statement : Declaration	<<  >>`,
		Id:         "Statement",
		NTType:     38,
		Index:      78,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : LabeledStmt	<<  >>`,
		Id:         "Statement",
		NTType:     38,
		Index:      79,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : SimpleStmt	<<  >>`,
		Id:         "Statement",
		NTType:     38,
		Index:      80,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : ReturnStmt	<<  >>`,
		Id:         "Statement",
		NTType:     38,
		Index:      81,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : BreakStmt	<<  >>`,
		Id:         "Statement",
		NTType:     38,
		Index:      82,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : GotoStmt	<<  >>`,
		Id:         "Statement",
		NTType:     38,
		Index:      83,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Block	<<  >>`,
		Id:         "Statement",
		NTType:     38,
		Index:      84,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : IfStmt	<<  >>`,
		Id:         "Statement",
		NTType:     38,
		Index:      85,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : ForStmt	<<  >>`,
		Id:         "Statement",
		NTType:     38,
		Index:      86,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `LabeledStmt : Label ":" RepeatTerminator Statement	<< ast.NewLabel(X[0].(*ast.Identifier), X[3]) >>`,
		Id:         "LabeledStmt",
		NTType:     39,
		Index:      87,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewLabel(X[0].(*ast.Identifier), X[3])
		},
	},
	ProdTabEntry{
		String: `SimpleStmt : empty	<<  >>`,
		Id:         "SimpleStmt",
		NTType:     40,
		Index:      88,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `SimpleStmt : Assignment	<<  >>`,
		Id:         "SimpleStmt",
		NTType:     40,
		Index:      89,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SimpleStmt : Expression	<<  >>`,
		Id:         "SimpleStmt",
		NTType:     40,
		Index:      90,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BreakStmt : kwdBreak	<< ast.NewBranching(string(X[0].(*token.Token).Lit), "") >>`,
		Id:         "BreakStmt",
		NTType:     41,
		Index:      91,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewBranching(string(X[0].(*token.Token).Lit), "")
		},
	},
	ProdTabEntry{
		String: `ReturnStmt : kwdRet	<< ast.NewReturnStatement() >>`,
		Id:         "ReturnStmt",
		NTType:     42,
		Index:      92,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewReturnStatement()
		},
	},
	ProdTabEntry{
		String: `GotoStmt : kwdGoto Label	<< ast.NewBranching(string(X[0].(*token.Token).Lit), X[1].(*ast.Identifier).Name) >>`,
		Id:         "GotoStmt",
		NTType:     43,
		Index:      93,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewBranching(string(X[0].(*token.Token).Lit), X[1].(*ast.Identifier).Name)
		},
	},
	ProdTabEntry{
		String: `Block : "{" RepeatTerminator StatementList "}"	<< X[2], nil >>`,
		Id:         "Block",
		NTType:     44,
		Index:      94,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[2], nil
		},
	},
	ProdTabEntry{
		String: `IfStmt : kwdIf not Expression Block	<< ast.NewIfStatement(true, X[2].(*ast.Branching), X[3].(ast.Node)) >>`,
		Id:         "IfStmt",
		NTType:     45,
		Index:      95,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIfStatement(true, X[2].(*ast.Branching), X[3].(ast.Node))
		},
	},
	ProdTabEntry{
		String: `IfStmt : kwdIf Expression Block	<< ast.NewIfStatement(false, X[1].(*ast.Branching), X[2].(ast.Node)) >>`,
		Id:         "IfStmt",
		NTType:     45,
		Index:      96,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIfStatement(false, X[1].(*ast.Branching), X[2].(ast.Node))
		},
	},
	ProdTabEntry{
		String: `ForStmt : kwdFor Block	<< ast.NewForStatement(nil, X[1].(ast.Node)) >>`,
		Id:         "ForStmt",
		NTType:     46,
		Index:      97,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForStatement(nil, X[1].(ast.Node))
		},
	},
	ProdTabEntry{
		String: `ForStmt : kwdFor ForClause Block	<< ast.NewForStatement(X[1].(ast.Node), X[2].(ast.Node)) >>`,
		Id:         "ForStmt",
		NTType:     46,
		Index:      98,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForStatement(X[1].(ast.Node), X[2].(ast.Node))
		},
	},
	ProdTabEntry{
		String: `ForClause : terminator terminator	<< ast.NewForClause(nil, nil, nil) >>`,
		Id:         "ForClause",
		NTType:     47,
		Index:      99,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForClause(nil, nil, nil)
		},
	},
	ProdTabEntry{
		String: `ForClause : SimpleStmt terminator terminator	<< ast.NewForClause(X[0].(ast.Node), nil, nil) >>`,
		Id:         "ForClause",
		NTType:     47,
		Index:      100,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForClause(X[0].(ast.Node), nil, nil)
		},
	},
	ProdTabEntry{
		String: `ForClause : SimpleStmt terminator Expression terminator	<< ast.NewForClause(X[0].(ast.Node), X[2].(ast.Node), nil) >>`,
		Id:         "ForClause",
		NTType:     47,
		Index:      101,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForClause(X[0].(ast.Node), X[2].(ast.Node), nil)
		},
	},
	ProdTabEntry{
		String: `ForClause : SimpleStmt terminator Expression terminator Expression	<< ast.NewForClause(X[0].(ast.Node), X[2].(ast.Node), X[4].(ast.Node)) >>`,
		Id:         "ForClause",
		NTType:     47,
		Index:      102,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForClause(X[0].(ast.Node), X[2].(ast.Node), X[4].(ast.Node))
		},
	},
	ProdTabEntry{
		String: `ForClause : SimpleStmt terminator terminator Expression	<< ast.NewForClause(X[0].(ast.Node), nil, X[3].(ast.Node)) >>`,
		Id:         "ForClause",
		NTType:     47,
		Index:      103,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForClause(X[0].(ast.Node), nil, X[3].(ast.Node))
		},
	},
	ProdTabEntry{
		String: `ForClause : terminator terminator Expression	<< ast.NewForClause(nil, nil, X[2].(ast.Node)) >>`,
		Id:         "ForClause",
		NTType:     47,
		Index:      104,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForClause(nil, nil, X[2].(ast.Node))
		},
	},
	ProdTabEntry{
		String: `ForClause : terminator Expression terminator Expression	<< ast.NewForClause(nil, X[1].(ast.Node), X[3].(ast.Node)) >>`,
		Id:         "ForClause",
		NTType:     47,
		Index:      105,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForClause(nil, X[1].(ast.Node), X[3].(ast.Node))
		},
	},
	ProdTabEntry{
		String: `ForClause : SimpleStmt	<< ast.NewForClause(nil, X[0].(ast.Node), nil) >>`,
		Id:         "ForClause",
		NTType:     47,
		Index:      106,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewForClause(nil, X[0].(ast.Node), nil)
		},
	},
	ProdTabEntry{
		String: `Assignment : Expression "=" Expression	<< ast.NewAssignStatement(X[0].(*ast.Identifier), X[2]) >>`,
		Id:         "Assignment",
		NTType:     48,
		Index:      107,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAssignStatement(X[0].(*ast.Identifier), X[2])
		},
	},
	ProdTabEntry{
		String: `Label : identifier	<< ast.NewIdentifier(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "Label",
		NTType:     49,
		Index:      108,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIdentifier(string(X[0].(*token.Token).Lit))
		},
	},
}
